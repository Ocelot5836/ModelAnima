plugins {
    id 'dev.architectury.loom' version '0.7.2-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.1.1'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = "${project.minecraft_version}-${project.mod_version}"
group = 'io.github.ocelot'
archivesBaseName = project.mod_id

loom {
    silentMojangMappingsLicense()

    runs {
        client {
            runDir "run/client"
        }
        server {
            runDir "run/server"
        }
    }

    localMods {
        it.add(sourceSets.test)
    }
}

configurations {
    shade
}

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings minecraft.officialMojangMappings()

    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // MoLang support
    implementation "com.github.Ocelot5836:molang-compiler:${project.molang_compiler_version}"
    shade "com.github.Ocelot5836:molang-compiler:${project.molang_compiler_version}"

    // These mods make life easier during runtime. They aren't strictly necessary
    modRuntime "curse.maven:configured-457570:3340535"
    modRuntime "curse.maven:catalogue-459701:3335979"

    // Testing
    modImplementation "com.github.Ocelot5836:Sonar:${project.sonar_version}"
}

processResources {
    inputs.property("mod_version", project.mod_version)
    inputs.property("mod_id", project.mod_id)
    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand 'mod_version': project.mod_version, 'mod_id': project.mod_id
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    classifier "shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : "ModelAnima",
                "Specification-Vendor"    : "Ocelot",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "Ocelot",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType'              : 'LIBRARY'
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
        if (project.hasProperty("jacksonMavenUser") && project.hasProperty("jacksonMavenPass")) {
            maven {
                url "https://maven.jaackson.me"
                credentials {
                    username = project.properties.jacksonMavenUser
                    password = project.properties.jacksonMavenPass
                }
            }
        }
    }
}
