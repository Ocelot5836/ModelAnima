buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${project.minecraft_version}-${project.mod_version}"
group = 'io.github.ocelot' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: "official", version: project.minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modelanima {
                    source sourceSets.main
                }
                examplemod {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modelanima {
                    source sourceSets.main
                }
                examplemod {
                    source sourceSets.test
                }
            }
        }
    }
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    extractRangeMap {
        sources sourceSets.test.java.srcDirs
    }
    applyRangeMap {
        sources sourceSets.test.java.srcDirs
    }
    sourceSets.test.java.srcDirs.each { extractMappedNew.addTarget it }
}

repositories{
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // These mods make life easier during runtime. They aren't strictly necessary
    runtimeOnly fg.deobf("curse.maven:configured-457570:3340535")
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:3335979")

    testImplementation fg.deobf("com.github.Ocelot5836:Sonar:${project.sonar_version}")
}

processResources {
    inputs.property("mod_version", project.mod_version)
    inputs.property("mod_id", project.mod_id)
    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand 'mod_version': project.mod_version, 'mod_id': project.mod_id
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : "ModelAnima",
                "Specification-Vendor"    : "Ocelot",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "Ocelot",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType': 'LIBRARY'
        ])
    }
}

task apiJar(type: Jar) {
    classifier = "api"
    from sourceSets.main.output
    from sourceSets.main.allSource
}

artifacts {
    archives apiJar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        if (project.hasProperty("jacksonMavenUser") && project.hasProperty("jacksonMavenPass")) {
            maven {
                url "https://maven.jaackson.me"
                credentials {
                    username = project.properties.jacksonMavenUser
                    password = project.properties.jacksonMavenPass
                }
            }
        }
    }
}
